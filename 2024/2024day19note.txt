import os
from functools import cache
import re
from itertools import product, chain

towelPatterns = []

@cache
def check_towel_pattern(towelDesign):
  patternRet = set()

  for towelPattern in towelPatterns:
    if towelPattern in towelDesign:
      maxSplit = 1 if len(towelPattern) > 1 else 0
      patternRegex = "(" + towelPattern + ")"
      splitDesigns = [x for x in re.split(patternRegex, towelDesign, maxSplit) if x]

      splitRet = []
      valid = True

      for splitDesign in splitDesigns:
        if splitDesign != towelPattern:
          ret = check_towel_pattern(splitDesign)
          if not ret:
            valid = False
            break
          splitRet.append(tuple(ret))
        else:
          splitRet.append(((splitDesign,),))

      if valid:
        patternRet.update([tuple(chain.from_iterable(product)) for product in list(product(*splitRet))])

  return patternRet

def read_towel_pattern(input):
  global towelPatterns

  towelPatternsDesigns = input.split("\n\n")
  towelPatterns = sorted(towelPatternsDesigns[0].split(", "), key=len, reverse=True)
  towelDesigns = towelPatternsDesigns[1].split("\n")

  validCount = 0

  for towelDesign in towelDesigns:
    valid = check_towel_pattern(towelDesign)
    validCount += len(valid)

  return validCount